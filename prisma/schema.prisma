generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  name       String
  image_url  String  @default("")
  slug       String  @unique
  canApprove Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mods         Mod[]
  comments     Comment[]
  favoriteMods ModFavorite[]
  tokens       Token[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginAttempt {
  id Int @id @default(autoincrement())

  ip        String
  userAgent String
  email     String
  success   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mod {
  id Int @id @default(autoincrement())

  name             String
  slug             String
  mod_id           String  @unique
  shortDescription String  @default("")
  description      String
  dependencies     String  @default("")
  type             String?
  isNSFW           Boolean
  isApproved       Boolean
  isFeatured       Boolean
  lastWeekDownloads Int     @default(0)
  downloads        Int     @default(0)

  lastReleasedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  versions  ModVersion[]
  tags      Tag[]
  images    ModImage[]
  favorites ModFavorite[]
  comments  Comment[]

  @@unique([slug, userId])
  // ✅ Indexes
  @@index([isNSFW])
  @@index([isApproved])
  @@index([isFeatured])
  @@index([lastReleasedAt])
  @@index([createdAt])
  @@index([userId])
  @@index([categoryId])
}

model ModImage {
  id          Int     @id @default(autoincrement())
  url         String
  preview_url String?
  isPrimary   Boolean
  isThumbnail Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mod   Mod? @relation(fields: [modId], references: [id])
  modId Int?

  // ✅ Indexes
  @@index([isPrimary])
  @@index([isThumbnail])
  @@index([createdAt])
  @@index([modId])
}

model ModVersion {
  id          Int     @id @default(autoincrement())
  version     String
  isLatest    Boolean
  changelog   String
  downloadUrl String
  extension   String?
  filename    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mod       Mod?          @relation(fields: [modId], references: [id])
  modId     Int?
  downloads ModDownload[]

  // ✅ Indexes
  @@index([isLatest])
  @@index([createdAt])
  @@index([modId])
}

model Tag {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mods Mod[]
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mods Mod[]

  // ✅ Indexes
  @@index([slug])
}

model ModDownload {
  id        Int    @id @default(autoincrement())
  ip        String
  userAgent String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  version      ModVersion? @relation(fields: [modVersionId], references: [id])
  modVersionId Int?

  // ✅ Indexes
  @@index([ip])
  @@index([createdAt])
  @@index([modVersionId])
}

model ModFavorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  mod   Mod? @relation(fields: [modId], references: [id])
  modId Int?
}

model KelvinGPTMessages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatId    String
  messageId String @default("")
  prompt    String @default("")
  message   String
  role      String
  who       String
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String

  isHidden Boolean

  ip String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  mod   Mod @relation(fields: [modId], references: [id])
  modId Int

  replyId Int?
  reply   Comment?  @relation("CommentToComment", fields: [replyId], references: [id])
  replies Comment[] @relation("CommentToComment")
}
